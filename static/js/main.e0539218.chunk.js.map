{"version":3,"sources":["components/Filter/Filter.module.css","redux/actions-phone/actions-phone.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","redux/reducer-phone/reducer-phone.js","redux/store.js","index.js","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css"],"names":["module","exports","contactActions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContacts","changeFilter","ContactList","contacts","useSelector","state","visibleContacts","items","filter","dispatch","useDispatch","className","s","contactList","map","type","onClick","OnDeleteContact","button","propType","PropTypes","arrayOf","shape","isRequired","string","func","toLowerCase","includes","ContactForm","useState","setName","setNumber","handleChange","event","target","value","onSubmit","preventDefault","label","input","onChange","Filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","contact","length","alert","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e0539218.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3CqKV\",\"label\":\"Filter_label__6fnro\",\"input\":\"Filter_input__2LXk2\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts/Add', (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nconst deleteContacts = createAction('contacts/Delete');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst contactActions = { addContact, deleteContacts, changeFilter };\r\nexport default contactActions;\r\n\r\n//REDUX\r\n\r\n// import * as types from '../types-phone/types-phone';\r\n\r\n// export const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// export const deleteContacts = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// export const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import s from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport contactActions from '../../redux/actions-phone/actions-phone';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(state =>\r\n    visibleContacts(state.contacts.items, state.contacts.filter),\r\n  );\r\n  const dispatch = useDispatch();\r\n  const OnDeleteContact = id => dispatch(contactActions.deleteContacts(id));\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={s.contacts} key={id}>\r\n          <p className={s.name}>{name}:</p>\r\n          <p className={s.number}>{number}</p>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => OnDeleteContact(id)}\r\n            className={s.button}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propType = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  OnDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n\r\nconst visibleContacts = (contacts, filter) => {\r\n  return contacts.filter(contacts =>\r\n    contacts.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n\r\n//REDUX\r\n\r\n//import { connect} from 'react-redux';\r\n\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: visibleContacts(items, filter),\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   OnDeleteContact: id => dispatch(contactActions.deleteContacts(id)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport contactActions from '../../redux/actions-phone/actions-phone';\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    dispatch(contactActions.addContact(name, number));\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChange}\r\n        ></input>\r\n      </label>\r\n      <label className={s.label}>\r\n        Number\r\n        <input\r\n          className={s.input}\r\n          type=\"text\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChange}\r\n        ></input>\r\n      </label>\r\n      <button className={s.button} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\n//REDUX\r\n\r\n//import { connect} from 'react-redux';\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: (name, number) => dispatch(contactActions.addContact(name, number)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm);\r\n","import s from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport contactActions from '../../redux/actions-phone/actions-phone';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(state => state.contacts.filter);\r\n  const onChange = event =>\r\n    dispatch(contactActions.changeFilter(event.target.value));\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n};\r\n\r\n//REDUX\r\n\r\n//import { connect } from 'react-redux';\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event => dispatch(contactActions.changeFilter(event.target.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\nimport ContactList from './components/ContactList/ContactList';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\n\nexport default function App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <Filter />\n      <h2>Contacts</h2>\n      <ContactList />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import contactActions from '../actions-phone/actions-phone';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst items = createReducer([], {\r\n  [contactActions.addContact]: (state, { payload }) => {\r\n    const ADD = state.filter(contact => payload.name === contact.name);\r\n    return ADD.length !== 1\r\n      ? [...state, payload]\r\n      : [...state] && alert(`${payload.name} is already in contacts.`);\r\n  },\r\n  [contactActions.deleteContacts]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactActions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n//REDUX\r\n\r\n// import * as types from '../types-phone/types-phone';\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","import contactsReducer from './reducer-phone/reducer-phone';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contact',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport const persistor = persistStore(store);\r\n\r\n//import { createStore, combineReducers } from 'redux';\r\n//import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n//const store = createStore(rootReducer, composeWithDevTools());\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__23IXB\",\"name\":\"ContactList_name__2caSe\",\"number\":\"ContactList_number__2uyRj\",\"button\":\"ContactList_button__GBzvY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__6qCWC\",\"input\":\"ContactForm_input__2lJyC\",\"button\":\"ContactForm_button__1oYeZ\"};"],"sourceRoot":""}